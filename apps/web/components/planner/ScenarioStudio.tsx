"use client";

import { useCallback, useEffect, useMemo, useState } from "react";
import type { ScenarioOutput } from "@schemas/index";
import ScenarioImpactGraphs from "@/components/planner/ScenarioImpactGraphs";

const defaultInput = {
  athleteId: "",
  eventId: "",
  heatStrategy: "moderate",
  carbTargetGPerHour: 85,
  caffeinePlan: "balanced",
  sodiumConfidence: "medium",
  hydrationPlan: "steady",
};

type ScenarioState = {
  loading: boolean;
  scenarios: ScenarioOutput[];
  error?: string;
};

// Three supplementation levels to compare
const scenarioChips = [
  {
    label: "Conservative",
    description: "Lower supplementation, safer approach",
    heatStrategy: "conservative",
    hydrationPlan: "steady",
    carbOffset: -10, // 10g/h less than baseline
  },
  {
    label: "Optimal",
    description: "Balanced supplementation for performance",
    heatStrategy: "moderate",
    hydrationPlan: "steady",
    carbOffset: 0, // baseline
  },
  {
    label: "Aggressive",
    description: "Higher supplementation, max performance",
    heatStrategy: "aggressive",
    hydrationPlan: "steady",
    carbOffset: 10, // 10g/h more than baseline
  },
];

type AthleteOpt = { id: string; firstName: string; lastName: string };
type EventOpt = { id: string; name: string };

type ScenarioStudioProps = {
  athlete?: AthleteOpt;
  lockAthlete?: boolean;
  demo?: boolean;
  demoSource?: boolean; // force demo data source for public pages
  athleteWeightKg?: number;
  autoGenerate?: boolean; // automatically generate scenarios on mount
  presetEventId?: string; // preset event ID for auto-generation
};

const computeCompositeScore = (score: ScenarioOutput["score"]) => (
  score.safety * 0.4 +
  score.raceability * 0.25 +
  score.simplicity * 0.15 +
  score.cost * 0.1 +
  score.weight * 0.1
);

const getScenarioLabel = (scenario: ScenarioOutput, fallbackIndex: number) => {
  const match = scenarioChips.find(
    (chip) => chip.heatStrategy === scenario.inputs.heatStrategy && chip.hydrationPlan === scenario.inputs.hydrationPlan,
  );
  return match?.label ?? `Scenario ${fallbackIndex + 1}`;
};

const getScenarioDescription = (scenario: ScenarioOutput) => {
  const match = scenarioChips.find(
    (chip) => chip.heatStrategy === scenario.inputs.heatStrategy && chip.hydrationPlan === scenario.inputs.hydrationPlan,
  );
  return match?.description ?? `${scenario.inputs.carbTargetGPerHour}g/h carbs`;
};

const getRiskColor = (value: number) => {
  if (value >= 0.5) return "bg-rose-500";
  if (value >= 0.35) return "bg-amber-500";
  return "bg-emerald-500";
};

const formatRiskPercent = (value: number) => `${Math.round(value * 100)}%`;

export default function ScenarioStudio({ athlete, lockAthlete = true, demo = false, demoSource = false, athleteWeightKg, autoGenerate = false, presetEventId }: ScenarioStudioProps) {
  const [input, setInput] = useState(defaultInput);
  const [state, setState] = useState<ScenarioState>({ loading: false, scenarios: [] });
  const [athletes, setAthletes] = useState<AthleteOpt[]>([]);
  const [events, setEvents] = useState<EventOpt[]>([]);
  const [hasAutoGenerated, setHasAutoGenerated] = useState(false);

  useEffect(() => {
    const load = async () => {
      try {
        const url = demoSource ? "/api/lookup/options?demo=1" : "/api/lookup/options";
        const res = await fetch(url);
        if (!res.ok) return;
        const data = (await res.json()) as { athletes: AthleteOpt[]; events: EventOpt[] };
        if (athlete) {
          setAthletes([athlete]);
        } else {
          setAthletes(data.athletes);
        }
        setEvents(data.events);
        setInput((prev) => ({
          ...prev,
          athleteId: prev.athleteId || athlete?.id || data.athletes[0]?.id || "",
          eventId: prev.eventId || presetEventId || data.events[0]?.id || "",
        }));
      } catch (error) {
        console.error("Failed to load options", error);
      }
    };
    load();
  }, [athlete, demoSource, presetEventId]);

  const generate = useCallback(async () => {
    setState({ loading: true, scenarios: [] });
    try {
      const payload = {
        inputs: scenarioChips.map((chip) => ({
          ...input,
          heatStrategy: chip.heatStrategy as "aggressive" | "moderate" | "conservative",
          hydrationPlan: chip.hydrationPlan as "minimal" | "steady" | "heavy",
          carbTargetGPerHour: Math.max(40, Math.min(120, input.carbTargetGPerHour + chip.carbOffset)),
        })),
        demo: demoSource || undefined,
      };

      const response = await fetch("/api/plan/batch", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });

      if (!response.ok) {
        throw new Error("Scenario generation failed");
      }

      const body = (await response.json()) as { scenarios: ScenarioOutput[] };
      setState({ loading: false, scenarios: body.scenarios });
    } catch (error) {
      console.error(error);
      setState({ loading: false, scenarios: [], error: error instanceof Error ? error.message : "Unknown error" });
    }
  }, [input, demoSource]);

  useEffect(() => {
    if (demoSource && athletes.length > 0 && events.length > 0 && state.scenarios.length === 0 && !state.loading) {
      void generate();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [demoSource, athletes.length, events.length]);

  // Auto-generate scenarios when autoGenerate is true and data is ready
  useEffect(() => {
    if (
      autoGenerate &&
      !hasAutoGenerated &&
      !demo && // Only auto-generate if NOT in demo mode (i.e., user is subscribed)
      athletes.length > 0 &&
      events.length > 0 &&
      input.athleteId &&
      input.eventId &&
      state.scenarios.length === 0 &&
      !state.loading
    ) {
      setHasAutoGenerated(true);
      void generate();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [autoGenerate, hasAutoGenerated, demo, athletes.length, events.length, input.athleteId, input.eventId]);

  const athleteLocked = useMemo(() => Boolean(athlete && lockAthlete), [athlete, lockAthlete]);

  const scenarioMeta = useMemo(
    () =>
      state.scenarios.map((scenario, index) => ({
        scenario,
        label: getScenarioLabel(scenario, index),
        description: getScenarioDescription(scenario),
        composite: computeCompositeScore(scenario.score),
        order: index,
      })),
    [state.scenarios],
  );

  const metaById = useMemo(() => {
    const map = new Map<string, { label: string; description: string; composite: number; order: number }>();
    scenarioMeta.forEach(({ scenario, label, description, composite, order }) => {
      map.set(scenario.id, { label, description, composite, order });
    });
    return map;
  }, [scenarioMeta]);

  const sortedByComposite = useMemo(() => [...scenarioMeta].sort((a, b) => b.composite - a.composite), [scenarioMeta]);
  const recommended = sortedByComposite[0];

  return (
    <div className="space-y-8">
      {/* Only show config form if not auto-generating or if scenarios are loaded */}
      {!autoGenerate && (
        <div className="grid gap-6 rounded-3xl border border-slate-800/70 bg-slate-900/40 p-6 md:grid-cols-2">
          {demo && (
            <div className="md:col-span-2 mb-2 rounded-xl border border-yellow-600/40 bg-yellow-500/10 p-3 text-xs text-yellow-100">
              Demo mode: generation is disabled. Subscribe to unlock full Scenario Studio.
            </div>
          )}
          <div className="space-y-4">
          <div>
            <label className="text-sm font-semibold text-slate-200">Athlete</label>
            <select
              value={input.athleteId}
              onChange={(event) => setInput((prev) => ({ ...prev, athleteId: event.target.value }))}
              disabled={athleteLocked}
              className="mt-2 w-full rounded-xl border border-slate-700 bg-slate-950/70 px-4 py-3 text-sm text-white focus:border-cyan-500 focus:outline-none"
            >
              {athletes.map((item) => (
                <option key={item.id} value={item.id}>
                  {item.firstName} {item.lastName}
                </option>
              ))}
            </select>
          </div>
          <div>
            <label className="text-sm font-semibold text-slate-200">Event</label>
            <select
              value={input.eventId}
              onChange={(event) => setInput((prev) => ({ ...prev, eventId: event.target.value }))}
              className="mt-2 w-full rounded-xl border border-slate-700 bg-slate-950/70 px-4 py-3 text-sm text-white focus:border-cyan-500 focus:outline-none"
            >
              {events.map((event) => (
                <option key={event.id} value={event.id}>
                  {event.name}
                </option>
              ))}
            </select>
          </div>
          <div>
            <label className="text-sm font-semibold text-slate-200">Carb target (g/h)</label>
            <input
              type="range"
              min={60}
              max={110}
              value={input.carbTargetGPerHour}
              onChange={(event) => setInput((prev) => ({ ...prev, carbTargetGPerHour: Number(event.target.value) }))}
              className="mt-2 w-full"
            />
            <p className="mt-1 text-xs text-slate-400">{input.carbTargetGPerHour} g/h baseline</p>
          </div>
          <div>
            <label className="text-sm font-semibold text-slate-200 mb-2 block">Supplementation Levels</label>
            <div className="space-y-2">
              {scenarioChips.map((chip) => (
                <div key={chip.label} className="rounded-lg border border-slate-700 bg-slate-950/40 px-4 py-3">
                  <div className="flex items-baseline gap-2">
                    <span className="text-sm font-semibold text-cyan-300">{chip.label}</span>
                    <span className="text-xs text-slate-500">
                      ({input.carbTargetGPerHour + chip.carbOffset}g/h carbs)
                    </span>
                  </div>
                  <p className="mt-1 text-xs text-slate-400">{chip.description}</p>
                </div>
              ))}
            </div>
          </div>
        </div>
        <div className="flex flex-col justify-between">
          <div className="rounded-2xl border border-slate-800 bg-slate-950/60 p-5 text-sm text-slate-300">
            <p className="font-semibold text-slate-200">How it works</p>
            <p className="mt-2 text-xs text-slate-400">
              We&apos;ll generate 3 scenarios showing the effects of different supplementation levels. Each uses Monte Carlo simulation (64 draws) to assess safety risks and performance impact.
            </p>
          </div>
          <button
            type="button"
            onClick={generate}
            disabled={state.loading || demo}
            className="mt-6 rounded-full bg-gradient-to-r from-cyan-500 to-sky-600 px-6 py-3 text-sm font-semibold text-white shadow-lg shadow-cyan-500/30 disabled:opacity-40"
          >
            {demo ? "Subscribe to generate" : state.loading ? "Generating scenarios..." : "Generate scenarios"}
          </button>
          {demo && (
            <a
              href="../../checkout/annual"
              className="mt-3 inline-flex rounded-full border border-cyan-600 px-4 py-2 text-xs font-semibold text-cyan-300"
            >
              Subscribe for $20/year
            </a>
          )}
        </div>
        </div>
      )}

      {/* Loading state for auto-generation */}
      {autoGenerate && state.loading && (
        <div className="rounded-xl border border-cyan-500/40 bg-cyan-500/10 p-6 text-center">
          <div className="inline-flex items-center gap-3">
            <div className="h-5 w-5 animate-spin rounded-full border-2 border-cyan-300 border-t-cyan-600"></div>
            <span className="text-sm font-medium text-cyan-100">Comparing 3 supplementation levels...</span>
          </div>
        </div>
      )}

      {state.error && (
        <div className="rounded-xl border border-red-500/40 bg-red-500/10 p-4 text-sm text-red-200">
          {state.error}
        </div>
      )}

      {/* Only show detailed recommendation and table in standalone mode */}
      {!autoGenerate && recommended && (
        <div className="space-y-5">
          <section
            id="scenario-recommendation"
            className="rounded-3xl border border-slate-800/70 bg-slate-900/40 p-6 text-sm text-slate-200"
          >
            <div className="flex flex-wrap items-start justify-between gap-4">
              <div className="space-y-1">
                <p className="text-xs uppercase tracking-wide text-cyan-300/80">Recommended scenario</p>
                <h3 className="text-lg font-semibold text-white">{recommended.label}</h3>
                <p className="text-xs text-slate-400">
                  Safety {recommended.scenario.score.safety}/100 | Raceability {recommended.scenario.score.raceability}/100 | Simplicity {recommended.scenario.score.simplicity}/100
                </p>
              </div>
              <div className="flex items-center gap-3">
                <div className="text-right">
                  <p className="text-2xl font-semibold text-white">{Math.round(recommended.composite)}</p>
                  <p className="text-xs text-slate-400">Composite score</p>
                </div>
                <a
                  href="#event-plans"
                  className="inline-flex items-center justify-center rounded-full bg-cyan-500 px-4 py-2 text-xs font-semibold text-slate-950 transition-transform hover:scale-105"
                >
                  Build this plan
                </a>
              </div>
            </div>

            <div className="mt-4 grid gap-4 md:grid-cols-3">
              {[
                { label: "GI risk", value: recommended.scenario.guardrails.giRisk },
                { label: "Sodium risk", value: recommended.scenario.guardrails.sodiumRisk },
                { label: "Caffeine risk", value: recommended.scenario.guardrails.caffeineRisk },
              ].map((guardrail) => (
                <div key={guardrail.label} className="rounded-2xl border border-slate-800 bg-slate-950/60 p-4">
                  <p className="text-xs uppercase tracking-wide text-slate-400">{guardrail.label}</p>
                  <div className="mt-3 flex items-center gap-2">
                    <div className="h-1.5 flex-1 overflow-hidden rounded-full bg-slate-800">
                      <div
                        className={`h-full rounded-full ${getRiskColor(guardrail.value)}`}
                        style={{ width: `${Math.min(100, guardrail.value * 100)}%` }}
                      />
                    </div>
                    <span className="text-xs text-slate-300">{formatRiskPercent(guardrail.value)}</span>
                  </div>
                </div>
              ))}
            </div>

            {recommended.scenario.score.dominantRisks.length > 0 && (
              <div className="mt-4 text-xs text-slate-400">
                <p className="font-semibold text-slate-200">Watch-outs</p>
                <ul className="mt-1 list-disc space-y-1 pl-4">
                  {recommended.scenario.score.dominantRisks.map((risk) => (
                    <li key={risk}>{risk}</li>
                  ))}
                </ul>
              </div>
            )}
          </section>

          <div className="overflow-x-auto rounded-3xl border border-slate-800/70 bg-slate-900/30">
            <table className="min-w-full divide-y divide-slate-800 text-xs text-slate-300">
              <thead className="bg-slate-900/60 text-[11px] uppercase tracking-wide text-slate-400">
                <tr>
                  <th scope="col" className="px-4 py-3 text-left">Scenario</th>
                  <th scope="col" className="px-4 py-3 text-right">Safety</th>
                  <th scope="col" className="px-4 py-3 text-right">Raceability</th>
                  <th scope="col" className="px-4 py-3 text-right">Simplicity</th>
                  <th scope="col" className="px-4 py-3 text-right">Cost</th>
                  <th scope="col" className="px-4 py-3 text-right">Weight</th>
                  <th scope="col" className="px-4 py-3 text-right">GI</th>
                  <th scope="col" className="px-4 py-3 text-right">Sodium</th>
                  <th scope="col" className="px-4 py-3 text-right">Caffeine</th>
                </tr>
              </thead>
              <tbody>
                {sortedByComposite.map((entry, rank) => (
                  <tr
                    key={entry.scenario.id}
                    className={entry.scenario.id === recommended.scenario.id ? "bg-slate-800/40" : "hover:bg-slate-800/20"}
                  >
                    <td className="px-4 py-3">
                      <div className="flex flex-col">
                        <span className="font-medium text-slate-100">#{rank + 1} {entry.label}</span>
                        <span className="text-[11px] text-slate-500">Composite {Math.round(entry.composite)}</span>
                      </div>
                    </td>
                    <td className="px-4 py-3 text-right tabular-nums text-slate-100">{entry.scenario.score.safety}</td>
                    <td className="px-4 py-3 text-right tabular-nums text-slate-100">{entry.scenario.score.raceability}</td>
                    <td className="px-4 py-3 text-right tabular-nums">{entry.scenario.score.simplicity}</td>
                    <td className="px-4 py-3 text-right tabular-nums">{entry.scenario.score.cost}</td>
                    <td className="px-4 py-3 text-right tabular-nums">{entry.scenario.score.weight}</td>
                    <td className="px-4 py-3 text-right tabular-nums">{formatRiskPercent(entry.scenario.guardrails.giRisk)}</td>
                    <td className="px-4 py-3 text-right tabular-nums">{formatRiskPercent(entry.scenario.guardrails.sodiumRisk)}</td>
                    <td className="px-4 py-3 text-right tabular-nums">{formatRiskPercent(entry.scenario.guardrails.caffeineRisk)}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}

      <div className="space-y-6">
        {state.scenarios.map((scenario) => {
          const meta = metaById.get(scenario.id);
          const label = meta?.label ?? "Scenario";
          const description = meta?.description ?? "";
          const isRecommended = recommended?.scenario.id === scenario.id;
          const guardrailList = [
            { label: "GI risk", value: scenario.guardrails.giRisk },
            { label: "Sodium risk", value: scenario.guardrails.sodiumRisk },
            { label: "Caffeine risk", value: scenario.guardrails.caffeineRisk },
          ];
          const weight = athleteWeightKg && athleteWeightKg > 0 ? athleteWeightKg : 70;

          // Calculate average risk
          const avgRisk = guardrailList.reduce((sum, g) => sum + g.value, 0) / guardrailList.length;
          const compositeScore = meta ? Math.round(meta.composite) : 0;

          return (
            <div
              key={scenario.id}
              className={`group relative rounded-2xl border bg-gradient-to-br from-slate-900/60 to-slate-900/40 text-sm text-slate-200 shadow-xl backdrop-blur-sm transition-all ${
                isRecommended
                  ? "border-cyan-400/50 shadow-cyan-500/20 ring-2 ring-cyan-500/30"
                  : "border-slate-700/50 hover:border-cyan-500/40 hover:shadow-cyan-500/10"
              }`}
            >
              {/* Compact horizontal layout */}
              <div className="grid grid-cols-1 gap-6 p-6 lg:grid-cols-[auto_1fr_auto]">
                {/* Left: Header + Composite Score */}
                <div className="flex flex-col gap-4 lg:min-w-[200px]">
                  <div className="space-y-2">
                    <div className="flex items-center gap-2 flex-wrap">
                      <h3 className="text-lg font-bold text-cyan-100">{label}</h3>
                      {isRecommended && (
                        <span className="flex items-center gap-1.5 rounded-full bg-gradient-to-r from-cyan-500/20 to-blue-500/20 px-3 py-1.5 text-[10px] font-semibold uppercase tracking-wider text-cyan-200 shadow-lg">
                          <svg className="h-3 w-3" fill="currentColor" viewBox="0 0 20 20">
                            <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                          </svg>
                          Recommended
                        </span>
                      )}
                    </div>
                    <p className="text-xs text-slate-300">{description}</p>
                    <p className="text-xs text-slate-500">
                      {scenario.inputs.carbTargetGPerHour}g/h carbs • {scenario.inputs.heatStrategy} strategy
                    </p>
                  </div>

                  {/* Composite Score Badge */}
                  <div className="flex items-center gap-3">
                    <div className="relative">
                      <div className="flex h-16 w-16 items-center justify-center rounded-full bg-gradient-to-br from-cyan-500/20 to-blue-600/20 ring-2 ring-cyan-400/30">
                        <span className="text-2xl font-bold text-cyan-100">{compositeScore}</span>
                      </div>
                      <div className="absolute -right-1 -top-1 flex h-6 w-6 items-center justify-center rounded-full bg-slate-800 ring-2 ring-cyan-500/50">
                        <svg className="h-3.5 w-3.5 text-cyan-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 3v4M3 5h4M6 17v4m-2-2h4m5-16l2.286 6.857L21 12l-5.714 2.143L13 21l-2.286-6.857L5 12l5.714-2.143L13 3z" />
                        </svg>
                      </div>
                    </div>
                    <div className="flex-1">
                      <p className="text-[11px] font-medium uppercase tracking-wider text-slate-400">Overall Score</p>
                      <div className="mt-1.5 h-2 w-full overflow-hidden rounded-full bg-slate-800/80">
                        <div
                          className="h-full rounded-full bg-gradient-to-r from-cyan-500 to-blue-500 transition-all"
                          style={{ width: `${compositeScore}%` }}
                        />
                      </div>
                    </div>
                  </div>

                  {/* Score Grid */}
                  <div className="grid grid-cols-3 gap-3 rounded-xl bg-slate-950/40 p-3">
                    <div className="text-center">
                      <dt className="text-[10px] font-medium uppercase tracking-wider text-slate-400">Safety</dt>
                      <dd className="mt-1 text-lg font-bold text-emerald-300">{scenario.score.safety}</dd>
                    </div>
                    <div className="text-center border-x border-slate-700/50">
                      <dt className="text-[10px] font-medium uppercase tracking-wider text-slate-400">Race</dt>
                      <dd className="mt-1 text-lg font-bold text-blue-300">{scenario.score.raceability}</dd>
                    </div>
                    <div className="text-center">
                      <dt className="text-[10px] font-medium uppercase tracking-wider text-slate-400">Simple</dt>
                      <dd className="mt-1 text-lg font-bold text-purple-300">{scenario.score.simplicity}</dd>
                    </div>
                  </div>
                </div>

                {/* Center: Nutrition + Risks */}
                <div className="space-y-4">
                  {/* Nutrition Totals - horizontal layout */}
                  <div className="rounded-xl bg-slate-950/40 p-4">
                    <p className="text-[11px] font-semibold uppercase tracking-wider text-slate-300 mb-3">Nutrition Totals</p>
                    <div className="grid grid-cols-2 gap-4 sm:grid-cols-4">
                      <div className="flex items-center gap-2">
                        <div className="flex h-10 w-10 flex-shrink-0 items-center justify-center rounded-lg bg-gradient-to-br from-amber-500/20 to-orange-600/20">
                          <svg className="h-5 w-5 text-amber-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                          </svg>
                        </div>
                        <div>
                          <dt className="text-[10px] font-medium uppercase tracking-wider text-slate-400">Carbs</dt>
                          <dd className="text-lg font-bold text-amber-200">{scenario.totals.carbs}<span className="text-xs font-normal text-slate-400">g</span></dd>
                        </div>
                      </div>
                      <div className="flex items-center gap-2">
                        <div className="flex h-10 w-10 flex-shrink-0 items-center justify-center rounded-lg bg-gradient-to-br from-blue-500/20 to-cyan-600/20">
                          <svg className="h-5 w-5 text-blue-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 008 10.586V5L7 4z" />
                          </svg>
                        </div>
                        <div>
                          <dt className="text-[10px] font-medium uppercase tracking-wider text-slate-400">Fluids</dt>
                          <dd className="text-lg font-bold text-blue-200">{scenario.totals.fluids}<span className="text-xs font-normal text-slate-400">ml</span></dd>
                        </div>
                      </div>
                      <div className="flex items-center gap-2">
                        <div className="flex h-10 w-10 flex-shrink-0 items-center justify-center rounded-lg bg-gradient-to-br from-rose-500/20 to-pink-600/20">
                          <svg className="h-5 w-5 text-rose-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zm0 0h12a2 2 0 002-2v-4a2 2 0 00-2-2h-2.343M11 7.343l1.657-1.657a2 2 0 012.828 0l2.829 2.829a2 2 0 010 2.828l-8.486 8.485M7 17h.01" />
                          </svg>
                        </div>
                        <div>
                          <dt className="text-[10px] font-medium uppercase tracking-wider text-slate-400">Sodium</dt>
                          <dd className="text-lg font-bold text-rose-200">{scenario.totals.sodium}<span className="text-xs font-normal text-slate-400">mg</span></dd>
                        </div>
                      </div>
                      <div className="flex items-center gap-2">
                        <div className="flex h-10 w-10 flex-shrink-0 items-center justify-center rounded-lg bg-gradient-to-br from-purple-500/20 to-pink-600/20">
                          <svg className="h-5 w-5 text-purple-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
                          </svg>
                        </div>
                        <div>
                          <dt className="text-[10px] font-medium uppercase tracking-wider text-slate-400">Caffeine</dt>
                          <dd className="text-lg font-bold text-purple-200">{scenario.totals.caffeine}<span className="text-xs font-normal text-slate-400">mg</span></dd>
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* Risk Indicators - horizontal */}
                  <div className="space-y-3 rounded-xl bg-slate-950/40 p-4">
                    <div className="flex items-center justify-between">
                      <p className="text-[11px] font-semibold uppercase tracking-wider text-slate-300">Risk Analysis</p>
                      <span className={`rounded-full px-2 py-0.5 text-[10px] font-bold uppercase tracking-wider ${
                        avgRisk < 0.05 ? "bg-emerald-500/20 text-emerald-300" :
                        avgRisk < 0.15 ? "bg-yellow-500/20 text-yellow-300" :
                        "bg-red-500/20 text-red-300"
                      }`}>
                        {avgRisk < 0.05 ? "Low" : avgRisk < 0.15 ? "Med" : "High"}
                      </span>
                    </div>
                    <div className="grid gap-3 sm:grid-cols-3">
                      {guardrailList.map((guardrail) => (
                        <div key={guardrail.label} className="space-y-1.5">
                          <div className="flex items-center justify-between">
                            <p className="text-xs font-medium text-slate-300">{guardrail.label}</p>
                            <span className={`rounded px-2 py-0.5 text-[11px] font-bold tabular-nums ${
                              guardrail.value < 0.05 ? "bg-emerald-500/20 text-emerald-300" :
                              guardrail.value < 0.15 ? "bg-yellow-500/20 text-yellow-300" :
                              "bg-red-500/20 text-red-300"
                            }`}>{formatRiskPercent(guardrail.value)}</span>
                          </div>
                          <div className="h-2 w-full overflow-hidden rounded-full bg-slate-800/80">
                            <div
                              className={`h-full rounded-full transition-all ${getRiskColor(guardrail.value)}`}
                              style={{ width: `${Math.min(100, guardrail.value * 100)}%` }}
                            />
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>

                  {/* Impact Graphs */}
                  <ScenarioImpactGraphs scenario={scenario} weightKg={weight} />

                  {/* Dominant Risks */}
                  {scenario.score.dominantRisks.length > 0 && (
                    <div className="rounded-lg border border-amber-500/30 bg-amber-500/10 p-3">
                      <div className="flex items-start gap-2">
                        <svg className="mt-0.5 h-4 w-4 flex-shrink-0 text-amber-400" fill="currentColor" viewBox="0 0 20 20">
                          <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                        </svg>
                        <div className="flex-1">
                          <p className="text-[11px] font-semibold uppercase tracking-wider text-amber-300">Watch Out</p>
                          <ul className="mt-1 space-y-0.5 text-xs text-amber-200/90">
                            {scenario.score.dominantRisks.map((risk) => (
                              <li key={risk}>• {risk}</li>
                            ))}
                          </ul>
                        </div>
                      </div>
                    </div>
                  )}
                </div>

                {/* Right: Optional action button or space */}
                <div className="flex items-start lg:min-w-[100px]">
                  {/* Could add action button here if needed */}
                </div>
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
}

